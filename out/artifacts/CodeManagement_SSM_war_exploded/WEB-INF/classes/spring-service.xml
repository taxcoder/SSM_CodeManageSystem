<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       https://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--扫描base-package下的包的注解-->
    <context:component-scan base-package="com.tx.service"/>
    <!--注入Mapping接口-->
    <bean class="com.tx.service.user.UserServiceImpl" id="userService">
       <property name="userMapper" ref="userMapper"/>
    </bean>

    <bean class="com.tx.service.uploadfile.UploadFileServiceImpl" id="fileService">
        <property name="uploadFileMapper" ref="uploadFileMapper"/>
    </bean>

    <!--配置事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务，使用JDK原生动态代理，不使用CGLIB动态代理-->
    <tx:annotation-driven proxy-target-class="false"/>
    <!--设置需要事务的方法，事务管理设置为JDBC事务管理（使用JDBC和mybatis进行数据持久化时使用）-->
    <tx:advice id="interceptor" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
            *:表示所有方法东需要配置
            -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--
    AOP配置
    AOP：在不影响原有代码，保证原有的代码可以正常的运行的前提下，额外的增加一些功能，如：日志，事务等。
    不使用AOP配置就必须手动的在代码上进行更改，可能会导致可以运行的代码，跑不起来，出现BUG等。
    推荐使用AOP进行配置。
    -->

    <!--设置动态代理类为JDK原生，不使用CGLIB-->
    <aop:config proxy-target-class="false">
        <!--
        横切关注点：需要切入的功能。
        切面：将横切关注点，实体化，转成一个类。
        通知：类中的方法。
        通知点：可以获取切入点的一些信息。
        -->

        <!--切入点:需要增加额外功能的地方-->
        <aop:pointcut id="point" expression="execution(* com.tx.dao.*.*(..))"/>
        <!--
        execution(* com.tx.dao.*.*(..))
        第一个*:表示返回值。
         com.tx.dao.*.*:dao下的所有类的所有方法。
         (..):任意长度的参数。
        -->

        <!--配置通知,织入事务-->
        <aop:advisor advice-ref="interceptor" pointcut-ref="point"/>
    </aop:config>
</beans>